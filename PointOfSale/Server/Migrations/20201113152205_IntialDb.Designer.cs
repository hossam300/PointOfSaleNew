// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PointOfSale.BLL.Contexts;

namespace PointOfSale.Server.Migrations
{
    [DbContext(typeof(POSContext))]
    [Migration("20201113152205_IntialDb")]
    partial class IntialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AddressTypes");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.BarcodeScanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BarcodeNomenclature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarcodePattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BarcodeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Encoding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sequence")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BarcodeTypeId");

                    b.ToTable("BarcodeScanners");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.BarcodeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BarcodeTypes");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("CountOfBranches")
                        .HasColumnType("int");

                    b.Property<string>("CountOfEmployees")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NaturalOfWork")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrefixName")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CountryGroupId")
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryGroupId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.CountryGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CountryGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PricelistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PricelistId");

                    b.ToTable("CountryGroups");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddressStreet1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddressStreet2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.CustomerContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddressStreet1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddressStreet2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerContacts");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.CustomerTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TaxId");

                    b.ToTable("CustomerTaxs");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FromEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpClient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.FiscalPointOfSaleition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CountryGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("DetectAutomatically")
                        .HasColumnType("bit");

                    b.Property<int>("FiscalPointOfSaleitionName")
                        .HasColumnType("int");

                    b.Property<bool>("VATRequired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CountryGroupId");

                    b.HasIndex("CountryId");

                    b.ToTable("FiscalPointOfSaleitions");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FloorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.FloorTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("FloorTables");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.LoyaltyProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PointPerMoneySpent")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("LoyaltyPrograms");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.OptionalProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("OptionalProductId")
                        .HasColumnType("int");

                    b.Property<int?>("OptionalProductsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OptionalProductsId");

                    b.HasIndex("ProductId");

                    b.ToTable("OptionalProducts");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Cash")
                        .HasColumnType("bit");

                    b.Property<string>("MehtodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.PriceRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApplyOn")
                        .HasColumnType("int");

                    b.Property<int?>("PricelistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PricelistId");

                    b.ToTable("PriceRules");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Pricelist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ShopId");

                    b.ToTable("Pricelists");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Printer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("PrinterType")
                        .HasColumnType("int");

                    b.Property<string>("ProxyIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Printers");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("AvailableInPOS")
                        .HasColumnType("bit");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Buy")
                        .HasColumnType("bit");

                    b.Property<bool>("CanBeExpensed")
                        .HasColumnType("bit");

                    b.Property<bool>("CanBePurchased")
                        .HasColumnType("bit");

                    b.Property<bool>("CanBeRented")
                        .HasColumnType("bit");

                    b.Property<bool>("CanBeSold")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ControlPolicy")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<double>("CustomerLeadTime")
                        .HasColumnType("float");

                    b.Property<string>("DescriptionForDeliveryOrders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionForReceipts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HSCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoicingPolicy")
                        .HasColumnType("int");

                    b.Property<bool>("IsEventTicket")
                        .HasColumnType("bit");

                    b.Property<bool>("Manufacture")
                        .HasColumnType("bit");

                    b.Property<double>("ManufacturingLeadTime")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Procurement")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SalesPrice")
                        .HasColumnType("float");

                    b.Property<bool>("SubscriptionProduct")
                        .HasColumnType("bit");

                    b.Property<bool>("ToWeighWithScale")
                        .HasColumnType("bit");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PrinterId")
                        .HasColumnType("int");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("PrinterId");

                    b.HasIndex("ShopId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("ApplyDiscountAmount")
                        .HasColumnType("float");

                    b.Property<double>("ApplyDiscountPercentage")
                        .HasColumnType("float");

                    b.Property<int>("ApplyDiscountType")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountProductId")
                        .HasColumnType("int");

                    b.Property<double>("FixedAmount")
                        .HasColumnType("float");

                    b.Property<int?>("GiftProductId")
                        .HasColumnType("int");

                    b.Property<int?>("LoyaltyProgramId")
                        .HasColumnType("int");

                    b.Property<double>("MaxDiscountAmount")
                        .HasColumnType("float");

                    b.Property<double>("MinimumAmount")
                        .HasColumnType("float");

                    b.Property<double>("MinimumPoints")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RewardCost")
                        .HasColumnType("float");

                    b.Property<int>("RewardType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountProductId");

                    b.HasIndex("GiftProductId");

                    b.HasIndex("LoyaltyProgramId");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Rules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("LoyaltyProgramId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PointsPerMoneySpent")
                        .HasColumnType("float");

                    b.Property<double>("PointsPerUnit")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LoyaltyProgramId");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.SahlApplication", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("APPNAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SahlApplication");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.SahlApplicationsCompanies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ExpireDate")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CompanyId");

                    b.ToTable("SahlApplicationsCompanies");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.SahlUserIdentity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("AdvancedPricelists")
                        .HasColumnType("bit");

                    b.Property<double>("AuthorizedDifference")
                        .HasColumnType("float");

                    b.Property<bool>("AutomaticReceiptPrinting")
                        .HasColumnType("bit");

                    b.Property<int?>("BarcodeScannerId")
                        .HasColumnType("int");

                    b.Property<bool>("BillPrinting")
                        .HasColumnType("bit");

                    b.Property<bool>("BillSpliitting")
                        .HasColumnType("bit");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("CashControl")
                        .HasColumnType("bit");

                    b.Property<bool>("CategoryPictures")
                        .HasColumnType("bit");

                    b.Property<bool>("ConnectDevices")
                        .HasColumnType("bit");

                    b.Property<int?>("DefaultPricelistId")
                        .HasColumnType("int");

                    b.Property<int?>("FiscalPointOfSaleitionId")
                        .HasColumnType("int");

                    b.Property<bool>("FiscalPointOfSaleitionPerOrder")
                        .HasColumnType("bit");

                    b.Property<string>("Footer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GlobalDiscounts")
                        .HasColumnType("bit");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HeaderFooter")
                        .HasColumnType("bit");

                    b.Property<bool>("Invoicing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRestaurant")
                        .HasColumnType("bit");

                    b.Property<bool>("LargeScrollbars")
                        .HasColumnType("bit");

                    b.Property<bool>("LoginWithEmployees")
                        .HasColumnType("bit");

                    b.Property<bool>("LoyaltyProgram")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OrderPrinter")
                        .HasColumnType("bit");

                    b.Property<bool>("OrderlineNotes")
                        .HasColumnType("bit");

                    b.Property<bool>("PrefillCashPayment")
                        .HasColumnType("bit");

                    b.Property<bool>("PriceControl")
                        .HasColumnType("bit");

                    b.Property<int?>("PricelistId")
                        .HasColumnType("int");

                    b.Property<string>("PrinterIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductPrices")
                        .HasColumnType("int");

                    b.Property<bool>("ReprintReceipt")
                        .HasColumnType("bit");

                    b.Property<bool>("RestrictAvailableCategories")
                        .HasColumnType("bit");

                    b.Property<bool>("SetStartCategory")
                        .HasColumnType("bit");

                    b.Property<bool>("SpecificFiscalPointOfSaleition")
                        .HasColumnType("bit");

                    b.Property<int?>("StartCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("TableManagement")
                        .HasColumnType("bit");

                    b.Property<int?>("TipProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Tips")
                        .HasColumnType("bit");

                    b.Property<bool>("VirtualKeyBoard")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BarcodeScannerId");

                    b.HasIndex("BranchId");

                    b.HasIndex("FiscalPointOfSaleitionId");

                    b.HasIndex("PricelistId");

                    b.HasIndex("StartCategoryId");

                    b.HasIndex("TipProductId");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.TaxMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("FiscalPointOfSaleitionId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxOnProductId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxToApplyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FiscalPointOfSaleitionId");

                    b.HasIndex("TaxOnProductId");

                    b.HasIndex("TaxToApplyId");

                    b.ToTable("TaxMappings");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.VendorProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorProducts");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.VendorTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TaxId");

                    b.ToTable("VendorTaxes");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("RoleId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.SahlUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.SahlUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PointOfSale.DAL.Domains.SahlUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.SahlUserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.AspNetUser", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.Shop", null)
                        .WithMany("AllowedEmployees")
                        .HasForeignKey("ShopId");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.BarcodeScanner", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.BarcodeType", "BarcodeType")
                        .WithMany()
                        .HasForeignKey("BarcodeTypeId");

                    b.Navigation("BarcodeType");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Branch", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.Company", "Company")
                        .WithMany("Branches")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Country", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.CountryGroup", "CountryGroup")
                        .WithMany()
                        .HasForeignKey("CountryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryGroup");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.CountryGroup", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.Pricelist", null)
                        .WithMany("AvailabeCountryGroups")
                        .HasForeignKey("PricelistId");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Customer", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.CustomerContact", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PointOfSale.DAL.Domains.Customer", "Customer")
                        .WithMany("CustomerContacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.CustomerTax", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.Product", "Product")
                        .WithMany("CustomerTaxes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PointOfSale.DAL.Domains.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Department", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.FiscalPointOfSaleition", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.CountryGroup", "CountryGroup")
                        .WithMany()
                        .HasForeignKey("CountryGroupId");

                    b.HasOne("PointOfSale.DAL.Domains.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");

                    b.Navigation("CountryGroup");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Floor", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.Shop", "Shop")
                        .WithMany("Floors")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.FloorTable", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.Floor", "Floor")
                        .WithMany("Tables")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.OptionalProduct", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.OptionalProduct", "OptionalProducts")
                        .WithMany()
                        .HasForeignKey("OptionalProductsId");

                    b.HasOne("PointOfSale.DAL.Domains.Product", "Product")
                        .WithMany("OptionalProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionalProducts");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.PaymentMethod", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.Shop", null)
                        .WithMany("PaymentMethods")
                        .HasForeignKey("ShopId");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.PriceRule", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.Pricelist", null)
                        .WithMany("PriceRules")
                        .HasForeignKey("PricelistId");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Pricelist", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PointOfSale.DAL.Domains.Shop", null)
                        .WithMany("AvailablePricelists")
                        .HasForeignKey("ShopId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Printer", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.Shop", null)
                        .WithMany("Printers")
                        .HasForeignKey("ShopId");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Product", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("PointOfSale.DAL.Domains.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PointOfSale.DAL.Domains.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.ProductCategory", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.ProductCategory", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.HasOne("PointOfSale.DAL.Domains.Printer", null)
                        .WithMany("PrintedProductCategories")
                        .HasForeignKey("PrinterId");

                    b.HasOne("PointOfSale.DAL.Domains.Shop", null)
                        .WithMany("AvailableCategories")
                        .HasForeignKey("ShopId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Reward", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.Product", "DiscountProduct")
                        .WithMany()
                        .HasForeignKey("DiscountProductId");

                    b.HasOne("PointOfSale.DAL.Domains.Product", "GiftProduct")
                        .WithMany()
                        .HasForeignKey("GiftProductId");

                    b.HasOne("PointOfSale.DAL.Domains.LoyaltyProgram", null)
                        .WithMany("Rewards")
                        .HasForeignKey("LoyaltyProgramId");

                    b.Navigation("DiscountProduct");

                    b.Navigation("GiftProduct");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Rules", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.LoyaltyProgram", null)
                        .WithMany("Rules")
                        .HasForeignKey("LoyaltyProgramId");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.SahlApplicationsCompanies", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.SahlApplication", "Application")
                        .WithMany("SahlApplicationsCompanies")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PointOfSale.DAL.Domains.Company", "Company")
                        .WithMany("SahlApplicationsCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.SahlUserIdentity", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.Company", "Company")
                        .WithMany("SahlUsers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Shop", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.BarcodeScanner", "BarcodeScanner")
                        .WithMany()
                        .HasForeignKey("BarcodeScannerId");

                    b.HasOne("PointOfSale.DAL.Domains.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PointOfSale.DAL.Domains.FiscalPointOfSaleition", "FiscalPointOfSaleition")
                        .WithMany()
                        .HasForeignKey("FiscalPointOfSaleitionId");

                    b.HasOne("PointOfSale.DAL.Domains.Pricelist", "Pricelist")
                        .WithMany()
                        .HasForeignKey("PricelistId");

                    b.HasOne("PointOfSale.DAL.Domains.ProductCategory", "StartCategory")
                        .WithMany()
                        .HasForeignKey("StartCategoryId");

                    b.HasOne("PointOfSale.DAL.Domains.Product", "TipProduct")
                        .WithMany()
                        .HasForeignKey("TipProductId");

                    b.Navigation("BarcodeScanner");

                    b.Navigation("Branch");

                    b.Navigation("FiscalPointOfSaleition");

                    b.Navigation("Pricelist");

                    b.Navigation("StartCategory");

                    b.Navigation("TipProduct");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.TaxMapping", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.FiscalPointOfSaleition", null)
                        .WithMany("TaxMappings")
                        .HasForeignKey("FiscalPointOfSaleitionId");

                    b.HasOne("PointOfSale.DAL.Domains.Tax", "TaxOnProduct")
                        .WithMany()
                        .HasForeignKey("TaxOnProductId");

                    b.HasOne("PointOfSale.DAL.Domains.Tax", "TaxToApply")
                        .WithMany()
                        .HasForeignKey("TaxToApplyId");

                    b.Navigation("TaxOnProduct");

                    b.Navigation("TaxToApply");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.VendorProduct", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.Product", "Product")
                        .WithMany("VendorProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PointOfSale.DAL.Domains.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.VendorTax", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.Product", "Product")
                        .WithMany("VendorTaxes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PointOfSale.DAL.Domains.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.ApplicationUserRole", b =>
                {
                    b.HasOne("PointOfSale.DAL.Domains.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("PointOfSale.DAL.Domains.AspNetUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.AspNetUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Company", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Departments");

                    b.Navigation("Products");

                    b.Navigation("SahlApplicationsCompanies");

                    b.Navigation("SahlUsers");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Customer", b =>
                {
                    b.Navigation("CustomerContacts");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.FiscalPointOfSaleition", b =>
                {
                    b.Navigation("TaxMappings");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Floor", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.LoyaltyProgram", b =>
                {
                    b.Navigation("Rewards");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Pricelist", b =>
                {
                    b.Navigation("AvailabeCountryGroups");

                    b.Navigation("PriceRules");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Printer", b =>
                {
                    b.Navigation("PrintedProductCategories");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Product", b =>
                {
                    b.Navigation("CustomerTaxes");

                    b.Navigation("OptionalProducts");

                    b.Navigation("VendorProducts");

                    b.Navigation("VendorTaxes");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.SahlApplication", b =>
                {
                    b.Navigation("SahlApplicationsCompanies");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.Shop", b =>
                {
                    b.Navigation("AllowedEmployees");

                    b.Navigation("AvailableCategories");

                    b.Navigation("AvailablePricelists");

                    b.Navigation("Floors");

                    b.Navigation("PaymentMethods");

                    b.Navigation("Printers");
                });

            modelBuilder.Entity("PointOfSale.DAL.Domains.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
