@using Net.ConnectCode.Barcode
@inject Microsoft.Extensions.Localization.IStringLocalizer<Resource.Products.PrintBarcode> Loc
@inject Microsoft.Extensions.Localization.IStringLocalizer<PointOfSale.DAL.Resources.Resources> Loc2
<div class="content d-flex flex-column flex-column-fluid" id="kt_content">

    <!--begin::Entry-->
    <div class="d-flex flex-column-fluid">
        <!--begin::Container-->
        <div class="container">
            <!--begin::Card-->
            <div class="card card-custom">


                <div class="card-body p-9" style="text-align:right">
                    <div class="col-md-12">
                        <div style="margin-bottom: 1rem" class="row">
                            <label class="col-xl-3">@Loc["NumberOfLables"]</label>
                            <div class="col-md-6">
                                <RadzenNumeric @bind-Value="@count" style="width: 100%" Name="Type">
                                </RadzenNumeric>

                            </div>
                            <div class="col-md-3">
                                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Light" Text="Print" Click="@Print">
                                </RadzenButton>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="printdiv">
                    <table class="table">
                        @for (int i = 0; i < count; i++)
                        {

                            <tr>
                                <td>
                                    <div style="font-family: 'Libre Barcode 39 Extended Text', cursive;font-size: 40px;"> @barcode</div>
                                </td>

                            </tr>
                        }

                    </table>
                </div>
            </div>
            <!--end::Card-->
        </div>
        <!--end::Container-->
    </div>
    <!--end::Entry-->
</div>
@code {
    [Parameter] public string Id { get; set; }
    public int? count { get; set; } = 0;
    async void Print()
    {
        await JSRuntime.InvokeVoidAsync("PrintElemWithBarcod", "printdiv");

    }
    string barcode = "";
    string barcode_text = "";
    void GenerateBarcode()
    {
        BarcodeFonts bcf = new BarcodeFonts();
        bcf.BarcodeType = BarcodeFonts.BarcodeEnum.Code39;
        bcf.CheckDigit = BarcodeFonts.YesNoEnum.Yes;
        bcf.Data = Id;
        bcf.encode();
        barcode = bcf.EncodedData;
        barcode_text = bcf.HumanText;
    }
    protected override async Task OnInitializedAsync()
    {
        GenerateBarcode();
    }
}
