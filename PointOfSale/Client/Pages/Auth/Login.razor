@page "/login"
@inject PointOfSale.Services.ISevices.IAuthService AuthService;
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService _localStorage;
@inject AuthenticationStateProvider _authenticationStateProvider ;
@using System.Net.Http.Headers;

@layout SessionLayout
@attribute [AllowAnonymous]

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}
<div class="d-flex flex-column flex-root">
    <!--begin::Login-->
    <div class="login login-4 login-signin-on d-flex flex-column flex-lg-row flex-row-fluid bg-white" id="kt_login">
        <!--begin::Aside-->
        <div class="login-aside order-2 order-lg-1 d-flex flex-column-fluid flex-lg-row-auto bgi-size-cover bgi-no-repeat p-7 p-lg-10">
            <!--begin: Aside Container-->
            <div class="d-flex flex-row-fluid flex-column justify-content-between">
                <!--begin::Aside body-->
                <div class="d-flex flex-column-fluid flex-column flex-center mt-5 mt-lg-0">
                    <a href="#" class="mb-15 text-center">
                        <img src="assets/media/logos/logo-letter-1.png" class="max-h-75px" alt="" />
                    </a>
                    <!--begin::Signin-->
                    <div class="login-form login-signin">
                        <div class="text-center mb-10 mb-lg-20">
                            <h2 class="font-weight-bold">Sign In</h2>
                            <p class="text-muted font-weight-bold">Enter your username and password</p>
                        </div>
                        <!--begin::Form-->
                        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <InputText Id="email" class="form-control h-auto border-0 px-0 placeholder-dark-75" @bind-Value="loginModel.Email" />
                                <ValidationMessage For="@(() => loginModel.Email)" />
                            </div>
                            <div class="form-group">
                                <InputText Id="password" type="password" Class="form-control h-auto border-0 px-0 placeholder-dark-75" @bind-Value="loginModel.Password" />
                                <ValidationMessage For="@(() => loginModel.Password)" />
                            </div>
                            <div class="form-group d-flex flex-wrap justify-content-between align-items-center mt-3">
                                <label class="checkbox checkbox-outline m-0 text-muted">
                                    <InputCheckbox @bind-Value="loginModel.RememberMe" type="checkbox" name="remember" />Remember me
                                    <span></span>
                                </label>
                            </div>
                            <button type="submit" class="btn btn-primary font-weight-bold px-9 py-4 my-3">Submit</button>
                        </EditForm>

                        <!--end::Form-->
                    </div>
                </div>
                <!--end::Aside body-->
                <!--begin: Aside footer for desktop-->
                <div class="d-flex flex-column-auto justify-content-between mt-15">
                    <div class="text-dark-50 font-weight-bold order-2 order-sm-1 my-2">© 2020 Metronic</div>
                    <div class="d-flex order-1 order-sm-2 my-2">
                        <a href="#" class="text-muted text-hover-primary">Privacy</a>
                        <a href="#" class="text-muted text-hover-primary ml-4">Legal</a>
                        <a href="#" class="text-muted text-hover-primary ml-4">Contact</a>
                    </div>
                </div>
                <!--end: Aside footer for desktop-->
            </div>
            <!--end: Aside Container-->
        </div>
        <!--begin::Aside-->
        <!--begin::Content-->
        <div class="order-1 order-lg-2 flex-column-auto flex-lg-row-fluid d-flex flex-column p-7" style="background-image: url(assets/media/bg/bg-4.jpg);">
            <!--begin::Content body-->
            <div class="d-flex flex-column-fluid flex-lg-center">
                <div class="d-flex flex-column justify-content-center">
                    <h3 class="display-3 font-weight-bold my-7 text-white">Welcome to Metronic!</h3>
                    <p class="font-weight-bold font-size-lg text-white opacity-80">
                        The ultimate Bootstrap, Angular 8, React &amp; VueJS admin theme
                        <br />framework for next generation web apps.
                    </p>
                </div>
            </div>
            <!--end::Content body-->
        </div>
        <!--end::Content-->
    </div>
    <!--end::Login-->
</div>


@code {

    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors;
    private string Error = "";
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("StartLoading");
        if (firstRender)
        {
            //await JSRuntime.InvokeVoidAsync("removeScript");
            //await JSRuntime.InvokeVoidAsync("ChangeToPosTemplate");
            await JSRuntime.InvokeVoidAsync("loadStyle", "/assets/css/pages/login/login-4.css");
            await JSRuntime.InvokeVoidAsync("loadStyle", "/assets/plugins/global/plugins.bundle.css");
            await JSRuntime.InvokeVoidAsync("loadStyle", "/assets/plugins/custom/prismjs/prismjs.bundle.css");
            await JSRuntime.InvokeVoidAsync("loadStyle", "/assets/css/style.bundle.css");
            //await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/assets/js/pages/custom/login/login-general.js");

        }
        await JSRuntime.InvokeVoidAsync("StopLoading");
    }
    private async Task HandleLogin()
    {
        await JSRuntime.InvokeVoidAsync("StartLoading");
        await _localStorage.ClearAsync();
        var response = await Http.PostAsJsonAsync("api/Login", loginModel);
        var loginResult = JsonSerializer.Deserialize<LoginResult>(await response.Content.ReadAsStringAsync(), new JsonSerializerOptions { PropertyNameCaseInsensitive = true });





        if (loginResult.Successful)
        {
            await _localStorage.SetItemAsync("authToken", loginResult.Token);
            ((ApiAuthenticationStateProvider)_authenticationStateProvider).MarkUserAsAuthenticated(loginModel.Email);
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", loginResult.Token);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Error = loginResult.Error;
            ShowErrors = true;
        }
        await JSRuntime.InvokeVoidAsync("StopLoading");
    }

}