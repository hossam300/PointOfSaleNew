@page "/Payments"
<RadzenGrid @ref="grid" AllowFiltering="true" AllowPaging="true" PageSize="3" AllowSorting="true" RowRender="@RowRender" ExpandMode="Radzen.DataGridExpandMode.Single"
            Data="@OrderPayments" TItem="OrderPayment">
    <Template Context="OrderPayment">
        <RadzenGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@OrderPayments" TItem="OrderPayment">
            <Columns>
                <RadzenGridColumn Width="100px" TItem="OrderPayment" Property="OrderPayment.Order.Id" Title="Order ID" />
                <RadzenGridColumn Width="200px" TItem="OrderPayment" Property="OrderPayment.Order.Customer.Name" Title="Customer" />
                <RadzenGridColumn TItem="OrderPayment" Property="OrderPayment.Order.OrderDate" Title="Order Date"></RadzenGridColumn>
                <RadzenGridColumn TItem="OrderPayment" Property="OrderPayment.Order.Total" Title="Total"></RadzenGridColumn>
            </Columns>
        </RadzenGrid>
    </Template>
    <Columns>
        <RadzenGridColumn TItem="OrderPayment" Title="Method">
            <Template Context="Method">
                @Method.PaymentMethod.MehtodName
            </Template>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>
@code {
    List<OrderPayment> OrderPayments;
    RadzenGrid<OrderPayment> grid;

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("StartLoading");
        OrderPayments = await Http.GetFromJsonAsync<List<OrderPayment>>("/api/OrderPayments/GetAll");
        await JSRuntime.InvokeVoidAsync("StopLoading");
    }

    void RowRender(Radzen.RowRenderEventArgs<OrderPayment> args)
    {
        args.Expandable = args.Data.PaymentMethod.MehtodName == "Cash" ;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // grid.ExpandRow(orders.FirstOrDefault());
            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }
}